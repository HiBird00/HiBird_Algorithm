#include<iostream>
#include<vector>
#include<queue>

using namespace std;

vector<vector<int>> connect;
vector<bool> isVisited;
queue<int> qu;
int n, m, v;

void DFS(int v) {
	if (isVisited[v - 1])
		return;
	isVisited[v - 1] = true;
	cout << v << " ";
	for (int i = 1; i <= n; i++) {
		if (connect[v - 1][i - 1])
			DFS(i);
	}
}

void BFS(int v) {
	qu.push(v);
	isVisited[v - 1] = true;
	
	while (!qu.empty()) {
		int now = qu.front();
		for (int i = 1; i <= n; i++) {
			if (connect[now - 1][i - 1] & !isVisited[i - 1]) {
				qu.push(i);
				isVisited[i - 1] = true;
			}
		}
		cout << now << " ";
		qu.pop();
	}
}

int main() {
	cin >> n >> m >> v;
	connect.assign(n, vector<int>(n, 0));
	isVisited.assign(n, false);
	for (int i = 0; i < m; i++) {
		int x, y;
		cin >> x >> y;
		connect[x-1][y-1] = true;
		connect[y-1][x-1] = true;
	}
	DFS(v);
	isVisited.assign(n, false);
	cout << endl;
	BFS(v);
	return 0;
}
